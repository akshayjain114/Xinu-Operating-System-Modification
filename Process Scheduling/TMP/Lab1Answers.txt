1.What are the advantages and disadvantages of each of the two scheduling policies? Also, give the advantages and disadvantages of the round robin scheduling policy originally implemented in Xinu. 

A. Random scheduler:
Advantages: 
1. It prevents starvation of ready processes with low priority, since such processes are also executed based on the random number generated by random generator.
2. Over the time, processes are executed in approximately the ratio of their priorities. Thus, the fairness is maintained.

Disadvantages:
1. The process with highest priority is not guaranteed to be completed first (assume all processes have the same required CPU time).
2. Even the process with highest priority may have a high turn around time.
3. The algorithm is not deterministic, as it is based on the generation of a random number. It can only be expected to give a fair output.
4. More time is spent in context switching than the round robin scheduling policy originally implemented in Xinu.
5. An extra algorithm (round-robin) is required to handle processes with same priority.

B. Linux-like scheduling:
Advantages:
1. It prevents starvation of ready processed with low priority, since although at the end of an epoch, such processes also get to execute in the epoch.
2. The algorithm is deterministic (when no process gets blocked).
 
Disadvantages:
1. Even the process with highest priority may have a high turn-around time, as compared to the round robin scheduling policy originally implemented in Xinu.
2. More time is spent in context switching than the round robin scheduling policy originally implemented in Xinu.
3. An extra algorithm (round-robin) is required to handle processes with same priority.

C. Default scheduling policy originally implemented in Xinu:
Advantages:
1. Highest priority proces is guaranteed to be completed first (assume all processes have the same required CPU time). Thus when we are required to run critical processes first, this policy is beneficial.
2. The algorithm is deterministic (when no process gets blocked).
3. It is fair for processes with equal priority, since it uses round-robin algorithm for such processes.
4. Less time is spent in context switch than Random and Linux-like scheduling.

Disadvantages:
1. It leads to starvation of processes with low priority.
2. It has low throughput.
3. An extra algorithm (round-robin) is required to handle processes with same priority.

------------------------------------------
2. Assume that there are three processes P1, P2, P3 that will run forever without blocking. We want to allocate the following CPU times to each of them: 20% to P1, 30% to P2, and 50% to P3. Which priorities do we need to set to P1, P2, and P3 to accomplish this if we want to use the Random scheduler?  Assume that those processes are the only ones running in the machine. Could you give a generalization of your result to n processes? Explain.

To allocate the following CPU times to each process: 20% to P1, 30% to P2, and 50% to P3 when these are the only ones running in the machine, their priorities can be anything in the ratio 2:3:5 (for example, 10, 15, and 25 OR 20, 30, and 50).
For 'n' processes to be allocated CPU times accordingly, we should set their priorities in the ratio of the percentages of the given CPU times.
For example, if there are 4 processes that need to be allocated 20%, 20%, 30%, and 30% CPU time, their priorities should be set to 20,20,30 and 30 (OR 10, 10, 15, and 15) respectively.

------------------------------------------
3. Describe the way each of the schedulers affects the NULL process.
All the schedulers execute the NULL process when there is no other ready (runnable) process.
As soon a another process becomes ready (runnable), resched() is called, and the null process becomes ready (runnable) while this other process starts to run. The null process never terminates.
For this reason, the priority of the NULL process is 0.